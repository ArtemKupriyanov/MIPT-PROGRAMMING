Куприянов Артем (RS)
Шагающий робот

1) На условных переменных

//Две условные переменные
condition_variable lefty;
condition_variable righty;
atomic<int> whichStep;
// 1 - когда последний шаг был влево, -1, когда последний шаг был вправо
whichStep.store(1);
mutex global_mutex;

void step(string s) {
	unique_lock<mutex> lock(global_mutex);
    //если нужно сделать шаг влево
    //Ждем, пока не сделали шаг вправо
    //Делаем Left
    //В переменной whichStep фиксируем то, что был сделан шаг влево
    //говорим всем ждущим потокам, что сделали шаг влево
	if (s == "left") {
		lefty.wait(lock, [] () {return whichStep == -1; });
		cout << "L" << endl;
		whichStep.store(1);
		righty.notify_all();
	}
    //Аналогично для шага вправо
}

2) На семафорах (в предположении, что реализация семафора у вас уже есть)

semaphore right_leg;
semaphore left_leg;
left_leg.post();

void step(string s) {
    //левый семафор пускаем в ожидание
    //если счетчик в семафоре будет неотрицательным, т.е будет баланс между
    //левыми и правыми шагами робота, то делаем Left,
    //иначе предыдущий шаг вправо не был выполнен и мы должны ждать, пока ветка
    //для правого шага не выполнит left_leg.post()
	if (s == "left") {
		left_leg.wait();
		cout << "L" << endl;
		right_leg.post();
	}
    //Аналогично для шага вправо
}
